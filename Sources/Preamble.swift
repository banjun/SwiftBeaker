// TODO: move to separate resource file

let preamble = [
    "import Foundation",
    "import APIKit",
    "import Himotoki",
    "import URITemplate",
    "",
    "protocol JSONBodyParametersConvertible {",
    "    var jsonBodyParametersObject: Any { get }",
    "}",
    "extension JSONBodyParametersConvertible {",
    "    var jsonBodyParameters: JSONBodyParameters {return JSONBodyParameters(JSONObject: jsonBodyParametersObject)}",
    "    var jsonBodyParametersObject: Any {return self} // default implementation",
    "}",
    "",
    "extension String: JSONBodyParametersConvertible {}",
    "extension Int: JSONBodyParametersConvertible {}",
    "extension Bool: JSONBodyParametersConvertible {}",
    "",
    "protocol DataStructureType: JSONBodyParametersConvertible {}",
    "extension Array where Element: JSONBodyParametersConvertible {",
    "    var jsonBodyParametersObject: Any {return self.map {$0.jsonBodyParametersObject}}",
    "}",
    "",
    "protocol URITemplateContextConvertible: JSONBodyParametersConvertible {}",
    "extension URITemplateContextConvertible {",
    "    var context: [String: Any] {return jsonBodyParametersObject as? [String: Any] ?? [:]}",
    "}",
    "",
    "enum ResponseError: Error {",
    "    case undefined(Int, String?)",
    "}",
    "",
    "struct RawDataParser: DataParser {",
    "    var contentType: String? {return nil}",
    "    func parse(data: Data) -> Any { return data }",
    "}",
    ""].joined(separator: "\n")
